local packer = require('packer')

local ensure_packer = function()
  local fn = vim.fn
  local install_path = fn.stdpath('data') .. '/site/pack/packer/start/packer.nvim'
  if fn.empty(fn.glob(install_path)) > 0 then
    fn.system({ 'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path })
    vim.cmd [[packadd packer.nvim]]
    return true
  end
  return false
end

local packer_bootstrap = ensure_packer()

packer.startup({
  function(use)
    -------------------------------------------------------------------------> LSP
    use {
      'neovim/nvim-lspconfig',
      requires = {
        'williamboman/mason.nvim',
        'williamboman/mason-lspconfig.nvim',
        'folke/neodev.nvim',
      },
    }
    use {
      'hrsh7th/nvim-cmp',
      requires = {
        'hrsh7th/cmp-nvim-lsp',
        {
          'L3MON4D3/LuaSnip',
          run = "make install_jsregexp",
        },
        'saadparwaiz1/cmp_luasnip',
        'FelipeLema/cmp-async-path',
        'David-Kunz/cmp-npm'
      },
    }
    use {
      'nvim-treesitter/nvim-treesitter',
      run = ':TSUpdate'

    }
    use {
      'nvim-treesitter/nvim-treesitter-textobjects',
      after = 'nvim-treesitter',
    }
    use 'b0o/schemastore.nvim'
    use {
      "pmizio/typescript-tools.nvim",
      requires = { "nvim-lua/plenary.nvim", "neovim/nvim-lspconfig" },
    }
    -- use "fladson/vim-kitty"
    -------------------------------------------------------------------------> VISUAL
    -- use 'f-person/auto-dark-mode.nvim'
    use {
      'VonHeikemen/fine-cmdline.nvim',
      requires = {
        'MunifTanjim/nui.nvim'
      }
    }
    use 'lukas-reineke/indent-blankline.nvim'
    use {
      'nvim-lualine/lualine.nvim',
      requires = {
        'nvim-tree/nvim-web-devicons',
        'linrongbin16/lsp-progress.nvim',
      },
    }
    -- use {
    --   'linrongbin16/lsp-progress.nvim',
    --   requires = {
    --     'nvim-tree/nvim-web-devicons'
    --   },
    -- }
    use 'karb94/neoscroll.nvim'
    use {
      'EdenEast/nightfox.nvim',
      run = ':NightfoxCompile',
    }
    use {
      "SmiteshP/nvim-navic",
      requires = "neovim/nvim-lspconfig"
    }
    use 'rcarriga/nvim-notify'
    use 'petertriho/nvim-scrollbar'
    use {
      'nvim-tree/nvim-tree.lua',
      requires = {
        'nvim-tree/nvim-web-devicons'
      },
    }
    use 'tummetott/reticle.nvim'
    -------------------------------------------------------------------------> FLOW
    --use {
    --  'goolord/alpha-nvim',
    --  requires = { 'nvim-tree/nvim-web-devicons' },
    --}
    use 'Pocco81/auto-save.nvim'
    use 'rmagatti/auto-session'
    use 'famiu/bufdelete.nvim'
    use 'numToStr/Comment.nvim'
    --use 'github/copilot.vim'
    use 'rmagatti/goto-preview'
    use 'RRethy/vim-illuminate'
    use 'kevinhwang91/nvim-hlslens'
    use {
      'nvim-telescope/telescope.nvim',
      branch = '0.1.x',
      requires = {
        'nvim-lua/plenary.nvim'
      }
    }
    use {
      'nvim-telescope/telescope-fzf-native.nvim',
      run = 'make',
      cond = vim.fn.executable 'make' == 1
    }
    use {
      'akinsho/toggleterm.nvim',
      tag = 'v2.*',
    }

    -------------------------------------------------------------------------> GIT
    --use {
    --  'sindrets/diffview.nvim',
    --  requires = 'nvim-lua/plenary.nvim'
    --}
    use {
     'lewis6991/gitsigns.nvim',
     requires = {
       'nvim-lua/plenary.nvim',
       tag = 'release'
     },
    }

    -------------------------------------------------------------------------> OTHER
    use 'dstein64/vim-startuptime'

    -------------------------------------------------------------------------> PACKER
    use 'wbthomason/packer.nvim'
    if packer_bootstrap then
      packer.sync()
    end
  end,
  config = {
    display = {
      open_fn = function()
        return require('packer.util').float({ border = 'single' })
      end
    }
  }
})

-- local packer_group = vim.api.nvim_create_augroup('packer', { clear = true })
-- vim.api.nvim_create_autocmd('BufWritePost', {
--   command = 'source <afile> | silent! LspStop | silent! LspStart | packerCompile',
--   group = packer_group,
--   pattern = vim.fn.expand '$MYVIMRC',
-- })
-- vim.cmd([[
--   augroup packer_group
--     autocmd!
--     autocmd BufWritePost plugins/init.lua source <afile> | PackerCompile
--   augroup end
-- ]])
