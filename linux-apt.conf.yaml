- defaults:
    link:
      create: true
      relink: true
      force: true

- clean:
    ~/:
      force: true

- link:
    ~/.hushlogin: ./.hushlogin
    ~/.bashrc: bash/.bashrc
    ~/.gitconfig: git-config/.gitconfig
    ~/.gitignore_global: git-config/.gitignore_global
    ~/.tmux.conf: tmux/.tmux.conf
    ~/.zprofile: zsh/.zprofile
    ~/.zshenv: zsh/.zshenv
    ~/.zshrc: zsh/.zshrc

- shell:
    - command: |
        sudo add-apt-repository ppa:neovim-ppa/unstable
        sudo apt-get update
      stderr: true
      quiet: true
      stdin: true
      description: Adding neovim apt repo

- aptget:
    - apt-transport-https
    - bat
    - build-essential
    - ca-certificates
    - dolphin
    - dos2unix
    - fzf
    - gnupg
    - imagemagick
    - jq
    - libcurl4-openssl-dev 
    - libssl-dev 
    - libxml2-dev 
    - lsb-release
    - lsof
    - neovim
    - p7zip
    - parallel
    - poppler-utils
    - progress
    - r-base
    - siege
    - socat
    - strace

- shell:
    - command: |
        export GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
        if ! command git ls-remote git@github.com:Ajibaji/seeshellontheseasaw.git; then
          echo "You aren't me. Nothing to see here"
          unset GIT_SSH_COMMAND
        else
          unset GIT_SSH_COMMAND
          if [ ! -d $HOME/seeshellontheseasaw ]; then
            git clone git@github.com:ajibaji/seeshellontheseasaw.git $HOME/seeshellontheseasaw
          fi
        fi
      stderr: true
      quiet: true
      description: git clone seeshellontheseasaw
    # - command: |
    #     if ! command -v fnm; then
    #       curl -fssl https://fnm.vercel.app/install | bash
    #     fi
    #   stdin: true
    #   stderr: true
    #   quiet: true
    #   description: installing fnm
    # - command: |
    #     fnm install v20
    #     fnm install v18
    #     fnm install v16
    #     fnm default v20
    #   stdin: true
    #   stderr: true
    #   quiet: true
    #   description: installing node 16/18/20
    # - command: |
    #     if ! command -v cargo; then
    #       curl https://sh.rustup.rs -ssf | sh -s -- -y
    #       curl -l --proto '=https' --tlsv1.2 -ssf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
    #       cargo binstall -y cargo-update
    #       cargo install-update -a
    #     fi
    #   stdin: true
    #   stderr: true
    #   quiet: true
    #   description: installing cargo
    - command: |
        if ! command -v atuin; then
          curl --proto '=https' --tlsv1.2 -lssf https://setup.atuin.sh | sh
        fi
      stdin: true
      stderr: true
      quiet: true
      description: installing atuin
    - command: |
        if ! command -v zoxide; then
          cargo binstall -y zoxide
        fi
      stdin: true
      stderr: true
      quiet: true
      description: installing zoxide
    - command: |
        if ! command -v yazi; then
          cargo binstall -y yazi-fm yazi-cli
        fi
      stdin: true
      stderr: true
      quiet: true
      description: installing yazi
    - command: |
        if ! command -v ripgrep; then
          cargo binstall -y ripgrep
        fi
      stdin: true
      stderr: true
      quiet: true
      description: installing ripgrep
    - command: |
        if ! command -v btm; then
          cargo binstall -y bottom
        fi
      stdin: true
      stderr: true
      quiet: true
      description: installing bottom
    - command: |
        if ! command -v fd; then
          cargo binstall -y fd-find
        fi
      stdin: true
      stderr: true
      quiet: true
      description: installing fd-find
    - command: |
        if ! command -v delta; then
          cargo binstall -y git-delta
        fi
      stdin: true
      stderr: true
      quiet: true
      description: installing delta
    - command: |
        if [[ ! -x "$(command -v lazygit)" ]] && [[ "$ostype" == "linux-gnu"* ]]; then
          cd $HOME
          arch=$(uname -m)
          [[ "$arch" == "aarch64" ]] && arch="arm64"
          lazygit_version=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -po '"tag_name": "v\k[^"]*')
          curl -lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${lazygit_version}_linux_${arch}.tar.gz"
          tar xzf lazygit.tar.gz lazygit
          install lazygit /usr/local/bin
        fi
      stdin: true
      stderr: true
      quiet: true
      description: installing lazygit
    - command: |
        wget -p ~/.local/share/fonts https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/jetbrainsmono.zip && \
          cd ~/.local/share/fonts && \
          unzip jetbrainsmono.zip && \
          rm jetbrainsmono.zip && \
          fc-cache -fv
      stdin: true
      stderr: true
      quiet: true
      description: installing jetbrains font
    - command: |
        if ! command -v fx; then
          curl https://fx.wtf/install.sh | sh
        fi
      stdin: true
      stderr: true
      quiet: true
      description: installing fx
    - command: |
        if ! command -v kitty; then
          curl -l https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
        fi
      stdin: true
      stderr: true
      quiet: true
      description: installing kitty
    - command: |
        if ! command -v dotnet; then
          wget https://dot.net/v1/dotnet-install.sh -o dotnet-install.sh
          chmod +x ./dotnet-install.sh 
          ./dotnet-install.sh --channel 8.0
          ./dotnet-install.sh --channel 7.0
          ./dotnet-install.sh --channel 6.0
          ./dotnet-install.sh --channel 3.1
          rm dotnet-install.sh

          export DOTNET_ROOT=$HOME/.dotnet
          export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools
          dotnet tool install --global csharp-ls
        fi
      stdin: true
      stderr: true
      quiet: true
      description: installing dotnet
    - command: |
        if ! command -v docker; then
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fssl https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$version_codename") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
        fi
      stderr: true
      quiet: true
      description: adding docker apt repo
    - command: |
        sudo groupadd docker
        sudo usermod -ag docker $user
        rm -rf ~/.docker
      stderr: true
      quiet: true
      description: allow docker to be used by non-root
    - command: |
        if ! command -v kubectl; then
          curl -fssl https://pkgs.k8s.io/core:/stable:/v1.31/deb/release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg

          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
        fi
      stderr: true
      quiet: true
      description: adding kubernetes apt repo
    - command: |
        if ! command -v az; then
          curl -sls https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/keyrings/microsoft.gpg > /dev/null
          sudo chmod go+r /etc/apt/keyrings/microsoft.gpg

          az_dist=$(lsb_release -cs)

          echo "types: deb
          uris: https://packages.microsoft.com/repos/azure-cli/
          suites: ${az_dist}
          components: main
          architectures: $(dpkg --print-architecture)
          signed-by: /etc/apt/keyrings/microsoft.gpg" | sudo tee /etc/apt/sources.list.d/azure-cli.sources

          sudo apt-get update
        fi
      stderr: true
      quiet: true
      description: adding azure-cli apt repo
    - command: |
        if ! command -v terraform; then
          wget -o- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list

          sudo apt-get update
        fi
      stderr: true
      quiet: true
      description: adding hashicorp apt repo

- aptget:
    - azure-cli
    - docker-ce
    - docker-ce-cli
    - containerd.io
    - docker-buildx-plugin
    - docker-compose-plugin
    - kubectl
    - terraform

- shell:
    - command: |
        if ! command -v k9s; then
          curl -ss https://webinstall.dev/k9s | bash
        fi
      stderr: true
      quiet: true
      description: installing k9s

- shell:
    - command: |
        npm i -g neovim typescript azure-pipelines-language-server typescript-language-server sql-language-server
      stdin: true
      stderr: true
      quiet: true
      description: installing npm packages
